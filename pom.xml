<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.fabri1983.eternity2</groupId>
	<artifactId>solver</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Eternity 2 Solver</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<skip.docker.build>true</skip.docker.build>
		<source.dir>${project.basedir}/src/main/java</source.dir> <!-- overridden by source processor (if any) -->
		<external.libs.dir>${project.basedir}/external-libs</external.libs.dir>
		<jmh.version>1.21</jmh.version>
	</properties>

	<dependencies>
		<!-- MPJExpress -->
		<dependency>
			<groupId>mpje</groupId>
			<artifactId>mpi</artifactId>
			<version>0.44</version>
			<scope>system</scope>
			<systemPath>${external.libs.dir}/mpj-v0_44/lib/mpi.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>mpje</groupId>
			<artifactId>mpiExp</artifactId>
			<version>0.44</version>
			<scope>system</scope>
			<systemPath>${external.libs.dir}/mpj-v0_44/lib/mpiExp.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>mpje</groupId>
			<artifactId>mpj</artifactId>
			<version>0.44</version>
			<scope>system</scope>
			<systemPath>${external.libs.dir}/mpj-v0_44/lib/mpj.jar</systemPath>
		</dependency>
		<!-- Roaring Bitmap (Fast Random Access Compressed Bitmap) (currently only in test scope) -->
		<dependency>
			<groupId>org.roaringbitmap</groupId>
			<artifactId>RoaringBitmap</artifactId>
			<version>0.8.12</version>
			<scope>test</scope>
		</dependency>
		<!-- Java EWAH (A compressed alternative to the Java BitSet class) (currently only in test scope) -->
		<dependency>
			<groupId>com.googlecode.javaewah</groupId>
			<artifactId>JavaEWAH</artifactId>
			<version>1.1.7</version>
			<scope>test</scope>
		</dependency>
		<!-- JMH Java Microbenchmark Harness -->
		<dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>${jmh.version}</version>
            <scope>provided</scope> <!-- only this dependency will be added to the final jar as per profile settings -->
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>${jmh.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Junit 4 -->
        <dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>mpje</id>
			<properties>
				<final.jar.name>e2solver_mpje</final.jar.name>
				<maven.compiler.source>8</maven.compiler.source>
				<maven.compiler.target>8</maven.compiler.target>
				<shade.exclusion.filter.1>org/fabri1983/eternity2/faster/benchmark/**</shade.exclusion.filter.1>
				<shade.exclusion.filter.2>dummy/package/name</shade.exclusion.filter.2>
				<shade.exclusion.filter.3>dummy/package/name</shade.exclusion.filter.3>
				<pg.injar.filter></pg.injar.filter>
				<manifest.main.class>org.fabri1983.eternity2.mpje.MainFasterMPJE</manifest.main.class>
				<env.props.file>mpje.properties</env.props.file>
			</properties>
		</profile>
		<profile>
			<id>java8</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<final.jar.name>e2solver</final.jar.name>
				<maven.compiler.source>8</maven.compiler.source>
				<maven.compiler.target>8</maven.compiler.target>
				<shade.exclusion.filter.1>org/fabri1983/eternity2/faster/benchmark/**</shade.exclusion.filter.1>
				<shade.exclusion.filter.2>dummy/package/name</shade.exclusion.filter.2>
				<shade.exclusion.filter.3>org/fabri1983/eternity2/mpje/**</shade.exclusion.filter.3>
				<pg.injar.filter></pg.injar.filter>
				<manifest.main.class>org.fabri1983.eternity2.faster.MainFaster</manifest.main.class>
				<env.props.file>threads.properties</env.props.file>
			</properties>
		</profile>
		<profile>
			<id>java8native</id>
			<properties>
				<final.jar.name>e2solver</final.jar.name>
				<maven.compiler.source>8</maven.compiler.source>
				<maven.compiler.target>8</maven.compiler.target>
				<shade.exclusion.filter.1>org/fabri1983/eternity2/faster/benchmark/**</shade.exclusion.filter.1>
				<shade.exclusion.filter.2>org/fabri1983/eternity2/ui/**</shade.exclusion.filter.2>
				<shade.exclusion.filter.3>org/fabri1983/eternity2/mpje/**</shade.exclusion.filter.3>
				<pg.injar.filter>!imgs/**</pg.injar.filter>
				<manifest.main.class>org.fabri1983.eternity2.faster.MainFasterNative</manifest.main.class>
				<env.props.file>threads.properties</env.props.file>
			</properties>
		</profile>
		<profile>
			<id>java11</id>
			<properties>
				<final.jar.name>e2solver</final.jar.name>
				<maven.compiler.source>8</maven.compiler.source>
				<maven.compiler.target>11</maven.compiler.target>
				<maven.compiler.release>11</maven.compiler.release>
				<shade.exclusion.filter.1>org/fabri1983/eternity2/faster/benchmark/**</shade.exclusion.filter.1>
				<shade.exclusion.filter.2>dummy/package/name</shade.exclusion.filter.2>
				<shade.exclusion.filter.3>org/fabri1983/eternity2/mpje/**</shade.exclusion.filter.3>
				<pg.injar.filter></pg.injar.filter>
				<manifest.main.class>org.fabri1983.eternity2.faster.MainFaster</manifest.main.class>
				<env.props.file>threads.properties</env.props.file>
			</properties>
		</profile>
		<profile>
			<id>java11native</id>
			<properties>
				<final.jar.name>e2solver</final.jar.name>
				<maven.compiler.source>8</maven.compiler.source>
				<maven.compiler.target>11</maven.compiler.target>
				<maven.compiler.release>11</maven.compiler.release>
				<shade.exclusion.filter.1>org/fabri1983/eternity2/faster/benchmark/**</shade.exclusion.filter.1>
				<shade.exclusion.filter.2>org/fabri1983/eternity2/ui/**</shade.exclusion.filter.2>
				<shade.exclusion.filter.3>org/fabri1983/eternity2/mpje/**</shade.exclusion.filter.3>
				<pg.injar.filter>!imgs/**</pg.injar.filter>
				<manifest.main.class>org.fabri1983.eternity2.faster.MainFasterNative</manifest.main.class>
				<env.props.file>threads.properties</env.props.file>
			</properties>
		</profile>
		<profile>
			<id>benchmark</id>
			<properties>
				<final.jar.name>e2solver_benchmark</final.jar.name>
				<maven.compiler.source>8</maven.compiler.source>
				<maven.compiler.target>11</maven.compiler.target>
				<maven.compiler.release>11</maven.compiler.release>
				<shade.exclusion.filter.1>dummy/package/name</shade.exclusion.filter.1>
				<shade.exclusion.filter.2>org/fabri1983/eternity2/ui/**</shade.exclusion.filter.2>
				<shade.exclusion.filter.3>org/fabri1983/eternity2/mpje/**</shade.exclusion.filter.3>
				<pg.injar.filter>!imgs/**</pg.injar.filter>
				<manifest.main.class>org.fabri1983.eternity2.faster.benchmark.MainFasterBenchmark</manifest.main.class>
				<env.props.file>threads.properties</env.props.file>
			</properties>
			<dependencies>
				<dependency>
		            <groupId>org.openjdk.jmh</groupId>
		            <artifactId>jmh-core</artifactId>
		            <version>${jmh.version}</version>
		            <scope>compile</scope>
		        </dependency>
			</dependencies>
		</profile>
		<profile>
			<id>Windows</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<properties>
				<script.extension>.bat</script.extension>
				<skip.chmod>true</skip.chmod>
			</properties>
		</profile>
		<profile>
			<id>Unix</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<script.extension>.sh</script.extension>
				<skip.chmod>false</skip.chmod>
			</properties>
		</profile>
	</profiles>

	<build>
		<finalName>${final.jar.name}</finalName>
		<sourceDirectory>${source.dir}</sourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>profiles/*</exclude>
				</excludes>
			</resource>
		</resources>
		<filters>
			<filter>src/main/resources/profiles/${env.props.file}</filter>
		</filters>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<compilerArgs>
						<arg>-O</arg>
						<arg>-g:none</arg> <!-- skip generation of debugging information -->
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<id>default-jar</id>
						<phase>package</phase>
					</execution>
				</executions>
				<configuration>
					<finalName>${final.jar.name}</finalName>
					<addMavenDescriptor>false</addMavenDescriptor>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>false</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>false</addDefaultSpecificationEntries>
							<mainClass>${manifest.main.class}</mainClass>
						</manifest>
					</archive>
					<classesDirectory>${project.build.outputDirectory}</classesDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.coderplus.maven.plugins</groupId>
				<artifactId>copy-rename-maven-plugin</artifactId>
				<version>1.0.1</version>
				<executions>
					<!-- copy Docker related files to target folder -->
					<execution>
						<id>copy-docker-files</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<sourceFile>${project.basedir}/src/main/docker/.dockerignore</sourceFile>
									<destinationFile>${project.build.directory}/.dockerignore</destinationFile>
								</fileSet>
								<fileSet>
									<sourceFile>${project.basedir}/src/main/docker/Dockerfile.java${maven.compiler.target}</sourceFile>
									<destinationFile>${project.build.directory}/Dockerfile</destinationFile>
								</fileSet>
								<fileSet>
									<sourceFile>${project.basedir}/src/main/docker/docker-build${script.extension}</sourceFile>
									<destinationFile>${project.build.directory}/docker-build${script.extension}</destinationFile>
								</fileSet>
							</fileSets>
						</configuration>
					</execution>
					<!-- copy MPJe machines file to target folder -->
					<execution>
						<id>copy-mpje-machines-file</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<sourceFile>${project.basedir}/src/main/resources/profiles/machines</sourceFile>
									<destinationFile>${project.build.directory}/machines</destinationFile>
								</fileSet>
							</fileSets>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
            				<createDependencyReducedPom>true</createDependencyReducedPom>
							<minimizeJar>true</minimizeJar>
							<filters>
								<filter>
									<artifact>org.fabri1983.eternity2:*</artifact>
									<excludes>
										<exclude>${shade.exclusion.filter.1}</exclude>
										<exclude>${shade.exclusion.filter.2}</exclude>
										<exclude>${shade.exclusion.filter.3}</exclude>
									</excludes>
								</filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.2.0</version>
				<executions>
					<execution>
						<id>process-classes-with-proguard</id>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<proguardVersion>6.1.1</proguardVersion>
					<proguardInclude>${basedir}/proguard.conf</proguardInclude>
					<injar>${project.build.finalName}.jar</injar>
					<inFilter>${pg.injar.filter}</inFilter>
                    <outjar>${project.build.finalName}.jar</outjar>
                    <outputDirectory>${project.build.directory}</outputDirectory>
					<addMavenDescriptor>false</addMavenDescriptor>
					<options>
						<option>-target ${maven.compiler.target}</option>
					</options>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>6.2.0</version>
						<scope>runtime</scope>
			        </dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-external-libs</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target name="copy-external-libs">
								<copy todir="${project.build.directory}/libs">
									<fileset dir="${external.libs.dir}">
										<include name="mpj-v0_44/**/*" />
									</fileset>
								</copy>
								<chmod perm="u+rwx" type="file">
									<fileset dir="${project.build.directory}/libs/mpj-v0_44/bin">
										<include name="*" />
										<exclude name="*.bat" />
									</fileset>
								</chmod>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<id>chmod for sh script</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<skip>${skip.chmod}</skip>
							<executable>chmod</executable>
							<commandlineArgs>+x ${project.build.directory}/docker-build${script.extension}</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<id>build Docker image</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<skip>${skip.docker.build}</skip>
							<executable>${project.build.directory}/docker-build${script.extension}</executable>
							<commandlineArgs>${project.build.finalName} ${project.packaging} dev</commandlineArgs>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!-- This plugin's configuration is used by Eclipse m2e. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute/>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>