package org.fabri1983.eternity2.core.mph;

/**
 * This class generated manually from the output algorithm in phash.c produced by the 
 * Bob Jenkins' Minimal Perfect Hash function algorithm, taking as input the misc/super_matriz_decimal.txt file.
 * See README.md file on how to generate that function.
 * 
 * PHASHRANGE - 1 is the greatest value produced by phash(), for the number of provided keys, which means super_matriz[] size must be PHASHRANGE.
 */
public class PerfectHashFunction2 {

	public static final int PHASHRANGE = 8192;
	
	// PHASHLEN 0x400 = 1024
	static short tab[] = { 1533, 5743, 4927, 7425, 7452, 941, 2209, 6759, 4481, 30, 6870, 3325, 6195, 7297, 3210, 8034,
			3270, 3969, 7585, 922, 218, 238, 2517, 2616, 1524, 6029, 6687, 5688, 4462, 1905, 1785, 4529, 2209, 7452,
			522, 7907, 5963, 1533, 608, 4262, 5216, 6321, 5355, 4755, 3465, 6799, 1751, 5311, 2478, 6847, 7084, 5615,
			2689, 5389, 4197, 2702, 6321, 1403, 310, 0, 1858, 3386, 4986, 3056, 359, 6323, 1403, 3822, 1338, 5345, 2478,
			5345, 6601, 1449, 3290, 1232, 7535, 1451, 2478, 4454, 4672, 5196, 3304, 131, 357, 4474, 4718, 998, 6849,
			2250, 4610, 7086, 2519, 1403, 5127, 0, 2918, 8190, 1810, 1766, 6849, 3210, 6322, 1607, 5890, 3855, 1192,
			5779, 7619, 3050, 4400, 1057, 157, 7425, 5905, 1377, 1968, 3083, 3921, 330, 7525, 2139, 2400, 4491, 7907,
			3574, 1388, 937, 6029, 2478, 7077, 2918, 1449, 3959, 0, 3969, 1403, 7622, 3950, 2918, 4491, 7992, 6576, 642,
			4303, 2820, 706, 0, 1232, 5136, 4064, 4481, 6895, 2572, 578, 1723, 3950, 6178, 7745, 1538, 6110, 6743, 5057,
			608, 5016, 6878, 4813, 2110, 4099, 6029, 3056, 5862, 3366, 4491, 7452, 3366, 3155, 5156, 532, 1905, 7555,
			7822, 6604, 2280, 3879, 2209, 6419, 3504, 7733, 3452, 6714, 5033, 3579, 6283, 5512, 7733, 1403, 2918, 3361,
			6651, 1905, 7857, 3950, 1338, 5499, 2987, 642, 4303, 7571, 6029, 2191, 7516, 8062, 5963, 3850, 7017, 322,
			3975, 7668, 1428, 4600, 7452, 7017, 7414, 6576, 6110, 6999, 5436, 896, 4751, 4305, 5368, 1785, 6263, 184,
			5389, 5499, 6675, 6383, 6799, 416, 684, 1041, 6601, 4266, 937, 7077, 7452, 3584, 3850, 5016, 7622, 16, 6669,
			4591, 1041, 3950, 7414, 3822, 4099, 522, 5452, 8070, 2028, 2710, 6029, 6743, 5156, 6849, 2987, 7722, 6917,
			357, 0, 3969, 3921, 3290, 4600, 5345, 6675, 5336, 4942, 1785, 4055, 7822, 1968, 7585, 322, 4400, 2110, 7992,
			7592, 4942, 3521, 5866, 1194, 4064, 330, 7250, 2932, 8166, 2857, 4751, 532, 6383, 3056, 218, 7084, 2400,
			6178, 1, 8056, 4535, 6177, 7452, 747, 6624, 4060, 2028, 3313, 4303, 7646, 508, 2418, 1533, 6322, 5743, 237,
			1905, 5499, 5881, 7966, 6029, 1293, 4491, 5628, 2055, 3509, 2794, 1403, 1194, 6675, 1905, 5512, 3071, 1338,
			4942, 2518, 7525, 6863, 6675, 1905, 7668, 1107, 7722, 1199, 7555, 992, 237, 3380, 12, 592, 2790, 7006, 6503,
			5389, 7571, 6834, 1402, 522, 608, 157, 1338, 7452, 3584, 508, 1057, 4600, 4672, 7733, 4491, 6870, 4099,
			3913, 4870, 1444, 2055, 5544, 7798, 3685, 1516, 100, 8044, 844, 6698, 7907, 7077, 1192, 4454, 4672, 5844,
			7147, 4627, 7250, 2794, 0, 3056, 6321, 747, 859, 6029, 3921, 5355, 4400, 2987, 5389, 6321, 6322, 7930, 2932,
			7733, 2018, 7017, 6302, 2139, 3404, 4055, 7863, 4306, 4481, 4482, 3210, 1769, 5615, 6283, 4649, 4781, 8070,
			6026, 2323, 1533, 4491, 7856, 3822, 2160, 532, 305, 6383, 6008, 2250, 1819, 3027, 6669, 3288, 6375, 2465,
			5218, 2028, 218, 540, 4280, 2400, 4099, 4230, 5184, 7966, 2185, 7425, 6743, 2343, 1403, 5220, 2379, 578,
			4491, 3950, 3969, 5628, 1403, 5033, 7164, 6799, 5985, 4441, 7508, 2546, 1814, 1449, 4751, 7437, 3259, 896,
			7525, 1785, 2798, 1516, 2658, 3210, 6799, 578, 2478, 508, 287, 6263, 5499, 5562, 7795, 4813, 3210, 2987,
			522, 7084, 7733, 1968, 4099, 3210, 7668, 237, 7733, 1810, 3146, 6663, 3465, 236, 479, 4672, 896, 190, 7575,
			3366, 7147, 5452, 1652, 12, 892, 1905, 6849, 0, 4710, 4400, 7825, 4942, 6383, 7017, 6669, 5345, 3969, 6675,
			1403, 1533, 1060, 2768, 3625, 4027, 7425, 479, 2110, 4642, 2987, 5357, 1091, 4401, 2400, 2798, 330, 2669,
			6283, 6917, 4986, 6847, 0, 3561, 5225, 7623, 5357, 4303, 7017, 6606, 1688, 3155, 6110, 3584, 1905, 7992,
			5881, 3969, 8034, 4813, 6283, 2822, 684, 8070, 2419, 7452, 7646, 2280, 6856, 4671, 1334, 5512, 6788, 3507,
			5905, 2820, 7992, 3969, 2572, 7877, 3120, 8070, 1896, 7082, 1428, 131, 6849, 3083, 508, 4999, 6689, 1194,
			1524, 6383, 5499, 5491, 4986, 4755, 2653, 4564, 4832, 3155, 5132, 7841, 1858, 2775, 2160, 4922, 6029, 2794,
			4999, 7425, 5361, 6141, 3050, 7745, 2139, 3950, 3386, 706, 4672, 578, 6029, 7622, 3527, 523, 3545, 3290,
			1254, 5774, 4310, 5663, 218, 3229, 4049, 3304, 1192, 5196, 1057, 992, 7059, 8190, 1232, 3120, 1105, 7508,
			5591, 7452, 2110, 3879, 282, 3123, 2987, 4055, 2918, 2794, 7622, 4099, 5544, 5151, 7866, 5053, 5764, 6477,
			7891, 6921, 2224, 642, 2478, 3210, 796, 1524, 1785, 8070, 8128, 6134, 7322, 378, 414, 4262, 684, 6675, 941,
			3699, 6029, 6023, 7992, 1538, 3210, 2987, 3056, 7733, 5544, 6666, 282, 313, 6299, 5499, 5218, 4381, 6759,
			4368, 7452, 5370, 669, 3669, 5225, 5628, 5355, 6921, 4164, 4491, 1533, 5628, 7733, 5586, 7412, 6601, 6322,
			578, 4177, 0, 2139, 5345, 5963, 2021, 759, 1313, 5809, 2937, 843, 0, 7592, 416, 6847, 3823, 1338, 3210,
			5129, 3017, 6576, 7745, 2359, 844, 5693, 4262, 6321, 5412, 7525, 0, 4482, 0, 4159, 2139, 218, 4813, 8070,
			4486, 0, 6675, 5986, 1905, 3639, 6853, 6029, 12, 6490, 1311, 8034, 3822, 6576, 5628, 7646, 3827, 6178, 7992,
			282, 2600, 7952, 4535, 3056, 1607, 4942, 7571, 8128, 6454, 2139, 2987, 7452, 5345, 4400, 5151, 532, 330,
			4703, 593, 2478, 5184, 1403, 4262, 1524, 7907, 7516, 7634, 747, 3959, 7891, 5890, 5225, 3950, 3187, 6604,
			46, 922, 7722, 2344, 6666, 3270, 3913, 2840, 1199, 7733, 5811, 522, 2976, 5512, 1905, 3155, 7781, 7167,
			6528, 5862, 5779, 6299, 5562, 6110, 2836, 4942, 713, 5831, 6109, 4986, 2191, 7634, 71, 3195, 1428, 2733,
			608, 3845, 2104, 4529, 3991, 6788, 2139, 3950, 2918, 3187, 2794, 8070, 7646, 4303, 2903, 6861, 5881, 2139,
			6029, 1338, 2918, 7199, 5743, 846, 6383, 4482, 1785, 4303, 7856, 7086, 1586, 190, 6283, 1814, 3950, 859,
			1622, 359, 592, 7270, 2986, 305, 311, 6856, 3879, 7646, 6383, 5743, 2472, 7009, 2857, 1146, 2160, 6675,
			6029, 7017, 2343, 639, 5184, 8173, 6808, 6322, 5436, 2790, 5952, 1199, 4491, 3545, 215, 3017, 7006, 0, 5435,
			3527, 2702, 3146, 7425, 2171, 1403, 5743, 7414, 322, 4927, 3155, 5361, 1146, 67, 998, 7059, 4942, 131, 7822,
			8166, 8015, 2243, 1338, 3259, 3146, 5196, 3584, 2768, 992, 6159, 3052, 4649, 3509, 5288, 4047, 2442, 4710,
			2476, 7006, 6863, 5389, 2110, 3083, 7516, 2653, 2558, 5320, 2519, 592, 7452, 2171, 3465, 5172, 1652, 2021,
			7646, 4781, 3827, 1810, 5889, 5615, 3056, 6383, 6675, 0, 4061, 4600, 1892, 2320, 8015, 6849, 1533, 1533,
			6799, 5196 };

	public static int phash(int val) {
		// NOTE: in Java remember to replace >> by >>> to avoid carrying out the bit sign when you know some operations exceed 2^31 - 1
		// I decided to use >>> to always avoid carrying out the sign.
		
		val += 0x6902a4cc; // PHASHSALT 0x6902a4cc = 1761780940 (31 bits!)
		val ^= (val >>> 16);
		
		/**
		 * IMPORTANT: val += (val << 8)
		 *  val << 8   This exceeds 31 bits for some values of val, and I suspect is down casted to int losing higher 32+ bits (if no later on).
		 *  val += ... This sum and assignment exceeds 31 bits as per before, and might be down casted twice: first at sum result and then at assignment step.
		 * 
		 * HOWEVER this behavior works fine and produces correct results.
		 */
		val += (val << 8);
		
		val ^= (val >>> 4);
		int b = (val >>> 8) & 0x3ff; // 0x3ff = 1023 => & 0x3ff is the fastest way of doing % 0x400 (PHASHLEN 1024)
		int a = (val + (val << 1)) >>> 19;
		int rsl = (a ^ tab[b]);
		return rsl; // from 0 up to PHASHRANGE - 1
	}
	
}
