package org.fabri1983.eternity2.core.mph;

/**
 * This class generated manually from the output algorithm in phash.c produced by the 
 * Bob Jenkins' Minimal Perfect Hash function algorithm, taking as input the misc/super_matriz_decimal.txt file.
 * See README.md file on how to generate that function.
 * 
 * PHASHRANGE - 1 is the greatest value produced by phash(), for the 6954 keys, which means super_matriz[] size must be PHASHRANGE.
 */
public class PerfectHashFunction2 {

	public static final int PHASHRANGE = 8192;
	
	// PHASHLEN 0x400 = 1024
	static short tab[] = { 8070, 7017, 7084, 5345, 2918, 532, 2209, 3669, 5828, 4474, 144, 706, 7609, 8056, 7452, 2018,
			4529, 1810, 5663, 2616, 7975, 4781, 4986, 3155, 1896, 5345, 5172, 669, 6238, 4491, 416, 6636, 859, 6029,
			8034, 2820, 4832, 7837, 6383, 2235, 2139, 2110, 759, 2976, 5196, 4672, 5336, 7134, 3842, 3685, 1570, 355,
			157, 3303, 5866, 7634, 4781, 6743, 7516, 2918, 4373, 3362, 1199, 1403, 7086, 6458, 1533, 7733, 1041, 5628,
			6110, 1524, 3155, 4922, 3366, 1232, 7622, 7688, 7345, 3715, 2028, 1814, 3304, 3969, 6799, 3290, 937, 2478,
			3950, 642, 3627, 4027, 992, 131, 7722, 7452, 8044, 7017, 4600, 7425, 6029, 1533, 2478, 2110, 6321, 1679,
			3959, 3584, 1444, 657, 12, 628, 8034, 4751, 5064, 3987, 592, 131, 3879, 1968, 4942, 896, 844, 6849, 2668,
			1334, 7886, 5184, 1905, 7622, 5562, 1403, 592, 6528, 3380, 5345, 0, 6383, 4600, 7425, 922, 7077, 5325, 6110,
			2139, 4055, 4491, 0, 7733, 7051, 4535, 4306, 1060, 3120, 8190, 5000, 2280, 6184, 6861, 2258, 532, 5952, 310,
			6834, 5862, 7992, 684, 4755, 3210, 7452, 1403, 4600, 4143, 2021, 2139, 5452, 828, 6321, 3975, 0, 2517, 7866,
			7077, 4055, 1524, 5978, 2903, 3619, 218, 3587, 3146, 359, 7966, 5412, 6322, 4303, 1480, 1194, 4999, 8166,
			6714, 5522, 0, 5628, 522, 2918, 7414, 1338, 3816, 6917, 2987, 5809, 4351, 1232, 3303, 2710, 3056, 6263,
			7841, 5512, 237, 3083, 578, 6863, 7646, 1533, 2883, 2825, 1821, 1343, 2185, 4220, 7059, 5963, 416, 4813,
			2794, 2987, 6675, 4400, 2400, 4262, 508, 992, 2276, 6103, 1199, 6159, 7006, 5930, 223, 4400, 3451, 3913,
			785, 6918, 2139, 5132, 2798, 5345, 642, 7966, 1570, 5866, 7891, 479, 2295, 7323, 4099, 4813, 628, 1444,
			3822, 2794, 6849, 7414, 7992, 1403, 131, 6029, 6322, 578, 3579, 7733, 4813, 4474, 8180, 4099, 3969, 2191,
			237, 6895, 1338, 1810, 3155, 1298, 7646, 7525, 183, 7841, 3083, 5930, 2768, 7863, 1403, 3056, 2653, 1334,
			4197, 6669, 1451, 7925, 6601, 6921, 6322, 2679, 0, 7575, 859, 5952, 3969, 4927, 3950, 2883, 330, 4491, 578,
			4986, 1905, 7084, 1538, 6283, 4813, 3842, 5963, 532, 7837, 7966, 5499, 7425, 4755, 5628, 6675, 5522, 7688,
			3017, 1377, 4682, 1858, 4306, 6029, 1403, 7516, 8065, 2191, 6995, 3979, 5033, 237, 592, 1334, 2185, 1751,
			4262, 4481, 8015, 1236, 2359, 5389, 5345, 6799, 7414, 6322, 0, 2379, 6743, 4832, 2418, 3950, 8070, 3210,
			3527, 7994, 6637, 1444, 4177, 5995, 5866, 608, 528, 796, 1857, 2616, 6571, 7102, 4351, 4055, 1524, 4195,
			3210, 7322, 5774, 2572, 4986, 5389, 8065, 0, 7733, 4055, 330, 1905, 416, 3509, 7992, 1533, 4099, 1091, 1403,
			2857, 2191, 4228, 1060, 7077, 5288, 7084, 3584, 508, 4441, 6747, 6454, 183, 3083, 3822, 5586, 4050, 5021,
			183, 8070, 7634, 7784, 3950, 5628, 5663, 2400, 6636, 532, 1199, 6799, 691, 6847, 5910, 4901, 4974, 5294,
			2976, 6856, 1232, 2021, 1810, 6863, 7147, 6435, 5743, 4610, 1199, 1382, 4642, 3210, 6026, 3697, 6675, 6895,
			4756, 6321, 7414, 5628, 4491, 4400, 2987, 4486, 3853, 3109, 4211, 4564, 7668, 5938, 3499, 416, 7891, 7310,
			3259, 1607, 2110, 1766, 5225, 828, 7884, 3769, 2209, 4306, 2478, 5196, 5650, 6403, 859, 4813, 3204, 4672,
			2918, 6383, 7622, 6601, 1524, 1968, 3083, 3056, 1192, 2139, 796, 3545, 3465, 6873, 282, 6177, 4441, 3499,
			747, 7045, 1480, 7646, 3639, 1194, 313, 3879, 6026, 5499, 131, 0, 6799, 4099, 7412, 1607, 532, 5628, 5743,
			2794, 7425, 6029, 2139, 3210, 508, 2472, 3017, 2540, 3950, 3195, 6322, 6177, 4672, 5985, 1192, 7687, 4986,
			7241, 5562, 3634, 5743, 3699, 4716, 3304, 6675, 5586, 3303, 4060, 7555, 2820, 2794, 2569, 4710, 6528, 4262,
			3822, 1905, 4600, 3879, 5628, 992, 5311, 2572, 1679, 532, 7822, 183, 7452, 2518, 845, 6029, 6870, 3218,
			6669, 6474, 4274, 1402, 4418, 5963, 6799, 7525, 5828, 2883, 8070, 12, 100, 4672, 4400, 6849, 322, 6278,
			7059, 1428, 4230, 4491, 7414, 7992, 7297, 6918, 8180, 7697, 6576, 1444, 8034, 5172, 1377, 3366, 2442, 3859,
			1968, 2028, 5499, 3146, 6029, 2794, 1377, 161, 7086, 3155, 3056, 1516, 4196, 3499, 2280, 6675, 4099, 2689,
			8062, 3400, 8180, 4666, 2679, 3017, 5764, 183, 8029, 7791, 218, 3991, 5196, 2773, 7323, 1428, 4974, 7322,
			41, 5336, 3288, 236, 1905, 1186, 2478, 3979, 6178, 2139, 7017, 3969, 5345, 3950, 2918, 6624, 494, 2689,
			5866, 1, 3850, 4164, 2517, 5811, 4927, 5562, 4642, 7722, 2320, 5220, 7733, 1210, 1766, 3288, 2199, 5923,
			7688, 4164, 6675, 3470, 5296, 7425, 5544, 7241, 7349, 4368, 7992, 5499, 1298, 573, 4832, 3520, 7781, 1146,
			3950, 6463, 2227, 3313, 8044, 5499, 5534, 4710, 5862, 8034, 4099, 1041, 4454, 5369, 1858, 237, 0, 6091, 532,
			5196, 1232, 522, 8025, 3366, 7452, 0, 1533, 157, 6753, 5127, 5798, 1970, 7672, 423, 1905, 2502, 5157, 3049,
			7573, 1146, 2055, 8103, 8190, 5112, 12, 7460, 7345, 3303, 7139, 5963, 6300, 7646, 0, 2558, 0, 1723, 2986,
			5743, 2918, 3950, 1968, 0, 2987, 4050, 5663, 1380, 3155, 6918, 5930, 4298, 3451, 5452, 7560, 6917, 5389,
			7017, 7886, 6669, 642, 3639, 5628, 1338, 4564, 2918, 3259, 5499, 8029, 6375, 3823, 4099, 3987, 1403, 5345,
			330, 1814, 922, 4303, 6263, 4682, 532, 508, 3969, 3056, 4813, 4230, 3018, 7745, 3155, 5225, 1652, 578, 532,
			1607, 2018, 2527, 3111, 7646, 4566, 5690, 4535, 5047, 4228, 287, 592, 3879, 7609, 131, 3699, 5512, 2794,
			3950, 1990, 1470, 5448, 6159, 218, 4962, 1428, 8034, 2922, 1516, 6490, 7877, 8130, 7745, 4274, 3405, 7966,
			5198, 896, 2842, 2903, 3202, 4612, 2001, 6103, 5127, 6601, 1785, 7452, 7579, 6322, 5628, 6528, 1428, 5021,
			4304, 3571, 7525, 0, 2546, 2280, 4541, 1905, 6669, 6110, 3462, 8070, 2191, 479, 3366, 2343, 8128, 0, 5978,
			3499, 3669, 7588, 3571, 5417, 3027, 313, 1057, 6481, 8042, 2280, 3921, 3210, 5499, 2856, 330, 3909, 4474,
			281, 6383, 4986, 6048, 1076, 1451, 12, 5255, 747, 2770, 914, 6159, 6441, 5871, 3083, 578, 1227, 7668, 2110,
			0, 3033, 5628, 3627, 2668, 3056, 4927, 1403, 6849, 359, 4400, 3210, 4266, 5985, 937, 6764, 4755, 7942, 4491,
			131, 238, 1810, 6757, 1411, 6799, 5412, 7082, 7126, 2844, 6666, 4927, 3669, 1766, 3902, 4298, 747, 3521,
			3451, 7077, 3071, 2880, 4751, 7017, 3950, 2478, 5544, 6624, 5689, 223, 6126, 6283, 3969, 4481, 2616, 4718,
			6091, 2785, 6323, 4481, 2710, 322, 1852, 4567, 7425, 508, 6675, 0, 3229, 2918, 3888, 1199, 2094, 6029, 3969,
			6675, 522, 4610 };

	public static int phash(int val) {
		// NOTE: in Java remember to replace >> by >>> to avoid carrying out the bit sign when you know some operations exceed 2^31 - 1
		// I decided to use >>> to always avoid carrying out the sign.
		
		val += 0x6902a4cc; // PHASHSALT 0x6902a4cc = 1761780940 (31 bits!)
		val ^= (val >>> 16);
		
		/**
		 * IMPORTANT: val += (val << 8)
		 *  val << 8   This exceeds 31 bits for some values of val, and I suspect is down casted to int losing higher 32+ bits (if no later on).
		 *  val += ... This sum and assignment exceeds 31 bits as per before, and might be down casted twice: first at sum result and then at assignment step.
		 * 
		 * However this behavior works fine and produces correct results.
		 */
		val += (val << 8);
		
		val ^= (val >>> 4);
		int b = (val >>> 8) & 0x3ff; // 0x3ff = 1023 => & 0x3ff is the fastest way of doing % 0x400 (PHASHLEN 1024)
		int a = (val + (val << 1)) >>> 19;
		int rsl = (a ^ tab[b]);
		return rsl; // from 0 up to PHASHRANGE - 1
	}
	
}
