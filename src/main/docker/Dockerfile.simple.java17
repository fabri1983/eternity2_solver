# mvn clean package -P java17native,proguard,docker

######################################################################################################
FROM adoptopenjdk/openjdk17:x86_64-alpine-jdk-17.0.1_9 AS STAGING-JRE-MINI

# At this point JAVA_HOME refers to:
#   adoptopenjdk: /opt/java/openjdk
#   zulu: /usr/lib/jvm/zulu-17

# Build a smaller Java 17 JRE
RUN ${JAVA_HOME}/bin/jlink \
     --module-path ${JAVA_HOME}/jmods \
     --compress=2 \
     --add-modules java.base,java.compiler,java.desktop,java.instrument,java.management.rmi,java.naming,java.prefs,java.scripting,java.security.jgss,java.sql,jdk.httpserver,jdk.unsupported \
     --no-header-files \
     --no-man-pages \
     --strip-debug \
     --output ${JAVA_HOME}/customjre \
    && apk add --no-cache --virtual .build-deps binutils \
    && strip -p --strip-unneeded ${JAVA_HOME}/customjre/lib/server/libjvm.so \
    && apk del --purge .build-deps \
    && rm -rf /tmp/*.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*
    

######################################################################################################
FROM alpine:3.14
ARG E2_JAR

# JAVA_HOME needs to be set:
#   adoptopenjdk: /opt/java/openjdk
#   zulu: /usr/lib/jvm/zulu-17

ENV ENV_ARG E2_JAR=${ARG E2_JAR} \
    JAVA_HOME=/opt/java/openjdk

ENV PATH="$PATH:$JAVA_HOME/bin"
    
# Copy JRE mini runtime from previous stage
COPY --from=STAGING-JRE-MINI $JAVA_HOME/customjre $JAVA_HOME

RUN mkdir -p /app/target

COPY ${E2_JAR} /app/target/
COPY libs /app/target/libs
COPY tools /app/tools

RUN chmod -R 755 /app/tools/*.sh \
    && chmod -R 755 /app/target/libs/mpje/bin/*

WORKDIR /app/tools

# Using CMD so it can be overwritten from outside
CMD ./run.sh -Dui.show=false -Djava.awt.headless=true -Dsun.java2d.xrender=false
