# mvn clean package -P java8native,docker-native-llvm-build
#
# NOTE: If using Windows Docker Toolbox you need to increase partition size of boot2docker virtual disk upto 13 GB (13312 MB).
# Follow this procedure: https://gist.github.com/joost/a7cfa7b741d9d39c1307
#   tip: normally virtual disk is located at C:\Users\<username>\.docker\machine\machines\default\
# Also increase Memory upto 4 GB (4096 MB) on the virtual image: go to image Settings and then System tab.

# Writing output into Host file system with Docker Volumes:
#   On Windows Docker Toolbox open Virtual Box machine Settings -> Shared Folder -> 
#       set Folder Path: C:\MyProjects\Eclipse
#       set Name: Eclipse
#       set Auto-mount: true
#       set Mount point: c
#     docker container run -it --rm -v /Eclipse/eternity2_solver/target/:/app/ --name e2solver fabri1983dockerid/e2solver:dev
#	On Windows Docker Desktop use:
#     docker container run -it --rm -v c:/MyProjects/Eclipse/eternity2_solver/target/:/app/ --name e2solver fabri1983dockerid/e2solver:dev
#   On Linux (WSL) use:
#     docker container run -it --rm -v /mnt/c/MyProjects/Eclipse/eternity2_solver/target/:/app/ --name e2solver fabri1983dockerid/e2solver:dev
#
# If you want to run the container by overriding the entrypoint and just see what's in it then use:
#   docker container run -it --rm --name e2solver --entrypoint=/bin/bash fabri1983dockerid/e2solver:dev
#
# Enter into a running container:
#   docker container exec -it e2solver
#
# See https://github.com/oracle/graal/blob/master/substratevm/LLVM-BACKEND.md
# See https://docs.oracle.com/en/graalvm/enterprise/21/docs/reference-manual/llvm/
######################################################################################################
FROM ubuntu:bionic

ARG E2_JAR
ARG JVMCI_URL=https://github.com/graalvm/graal-jvmci-8/releases/download/jvmci-21.3-b03/openjdk-8u302+06-jvmci-21.3-b03-linux-amd64.tar.gz
ARG GRAALVM_BRANCH=release/graal-vm/21.3

ENV ENV_E2_JAR=${E2_JAR}
ENV JAVA_HOME=/opt/openjdk-jvmci
ENV PATH="/opt/mx-master:$JAVA_HOME/bin:$PATH"

RUN apt-get -y update \
 && apt-get -y install git curl build-essential cmake python unzip zlib1g-dev \
 && rm -rf /var/lib/apt/lists/* \
 && rm -rf /var/cache/apt

RUN cd /opt \
 && curl -LO https://github.com/graalvm/mx/archive/master.zip \
 && unzip master.zip \
 && rm master.zip \
 && curl -L $JVMCI_URL | tar -xz \
 && mv *jdk* openjdk-jvmci \
 && git clone --single-branch --branch $GRAALVM_BRANCH https://github.com/oracle/graal.git 

RUN cd /opt \
 && cd graal/vm \
 && mx --no-sources --disable-polyglot --disable-libpolyglot --skip-libraries=true \
    --exclude-components=gvm,nju,nil,polynative,tflm \
    --dynamicimport /sulong,/substratevm,/tools build \
 && cd ../substratevm \
 && export SULONG_BOOTSTRAP_GRAALVM=$(mx graalvm-home) \
 && cd ../sulong \
 && export LLVM_TOOLCHAIN=$(mx lli --print-toolchain-path) \
 && export PATH=${LLVM_TOOLCHAIN}:$PATH

RUN mkdir -p /app/llvm

COPY ${ENV_E2_JAR} /app/

RUN echo ${SULONG_BOOTSTRAP_GRAALVM} \
 && echo ${LLVM_TOOLCHAIN} && ls -la ${LLVM_TOOLCHAIN} \
 && echo $PATH \
 && mx native-image --help

# Using CMD so it can be overwritten from outside
CMD mx native-image --verbose -H:CompilerBackend=llvm \
    -J-XX:-TieredCompilation -Dgraal.LoopPeeling=false \
    -H:Features=org.graalvm.home.HomeFinderFeature --features=org.graalvm.home.HomeFinderFeature \
    -H:CCompilerOption=-O0 -H:Optimize=0 \
    -H:LLVMMaxFunctionsPerBatch=1 -H:+SpawnIsolates \
    -H:Log=InvokeCC -H:TempDirectory=./ -jar ${ENV_E2_JAR}
